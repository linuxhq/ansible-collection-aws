---
- name: Ensure ec2 security groups are present
  tags:
    - ec2_security_group
  amazon.aws.ec2_security_group:
    description: "{{ _sg.1.description | d(_sg.1.name) }}"
    name: "{{ _sg.1.name }}"
    purge_rules: false
    purge_rules_egress: false
    purge_tags: true
    state: present
    tags:
      "{{ _sg.1.tags |
          d({}) |
          combine({'Name': _sg.1.name}) }}"
    validate_certs: true
    vpc_id: "{{ _sg.0.vpc_id }}"
  loop:
    "{{ q('ansible.builtin.subelements',
          ec2_security_group_list,
          'security_groups',
          {'skip_missing': true}) }}"
  loop_control:
    label: "{{ _sg.1.name | d(none) }}"
    loop_var: _sg
  when:
    - _sg.0.vpc_id is defined
    - _sg.1.name is defined

- name: Ensure ec2 security groups are populated
  tags:
    - ec2_security_group
  amazon.aws.ec2_security_group:
    description: "{{ _sg.1.description | d(_sg.1.name) }}"
    name: "{{ _sg.1.name }}"
    purge_rules: true
    purge_rules_egress: true
    purge_tags: true
    rules: "{{ _sg.1.rules }}"
    rules_egress: "{{ _sg.1.rules_egress }}"
    state: present
    tags:
      "{{ _sg.1.tags |
          d({}) |
          combine({'Name': _sg.1.name}) }}"
    validate_certs: true
    vpc_id: "{{ _sg.0.vpc_id }}"
  register: __ec2_security_group_results
  loop: "{{ q('ansible.builtin.subelements',
              ec2_security_group_list,
              'security_groups',
              {'skip_missing': true}) }}"
  loop_control:
    label: "{{ _sg.1.name | d(none) }}"
    loop_var: _sg
  when:
    - _sg.0.vpc_id is defined
    - _sg.1.name is defined
    - _sg.1.rules is defined
    - _sg.1.rules | length > 0
    - _sg.1.rules_egress is defined
    - _sg.1.rules_egress | length > 0

- name: Ensure ec2 security group result list is generated
  tags:
    - ec2_security_group
  ansible.builtin.set_fact:
    _ec2_security_group_list:
      "{{ __ec2_security_group_results.results |
          list |
          d([]) }}"
...
