---
- name: Ensure elastic filesystem default security group rules are generated
  tags:
    - efs
  ansible.builtin.set_fact:
    _efs_rules:
      - cidr_ip: 0.0.0.0/0
        ports:
          - 2049
        proto: tcp
    _efs_rules_egress:
      - cidr_ip: 0.0.0.0/0
        proto: -1
  when:
    - efs_list | length > 0

- name: Ensure elastic filesystem security groups are present
  tags:
    - efs
  amazon.aws.ec2_security_group:
    description: "{{ _sg.description | d(_sg.name) }}"
    name: "{{ _sg.name }}"
    purge_rules: true
    purge_rules_egress: true
    purge_tags: true
    rules: "{{ _sg.rules | d(_efs_rules) }}"
    rules_egress: "{{ _sg.rules_egress | d(_efs_rules_egress) }}"
    state: present
    tags:
      "{{ _sg.tags |
          d({}) |
          combine({'Name': _sg.name}) }}"
    validate_certs: true
    vpc_id: "{{ _sg.vpc_id }}"
  register: __efs_security_group_results
  loop: "{{ efs_list }}"
  loop_control:
    label: "{{ _sg.name | d(none) }}"
    loop_var: _sg
  when:
    - _sg.name is defined
    - _sg.vpc_id is defined

- name: Ensure dictionary of efs security group ids is generated
  tags:
    - efs
  ansible.builtin.set_fact:
    _efs_security_group_id:
      "{{ _efs_security_group_id |
          d({}) |
          combine({_sg.tags.Name: _sg.group_id}) }}"
  loop: "{{ __efs_security_group_results.results }}"
  loop_control:
    label: "{{ _sg.tags.Name | d(none) }}"
    loop_var: _sg
  when:
    - _sg.tags.Name is defined

- name: Ensure elastic filesystems are present
  tags:
    - efs
  community.aws.efs:
    encrypt: "{{ _efs.encrypt | d(false) }}"
    kms_key_id: "{{ _efs.kms_key_id | d(omit) }}"
    name: "{{ _efs.name }}"
    performance_mode: "{{ _efs.performance_mode | d('general_purpose') }}"
    provisioned_throughput_in_mibps: "{{ _efs.provisioned_throughput_in_mibps | d(omit) }}"
    purge_tags: "{{ _efs.purge_tags | d(true) }}"
    state: present
    tags:
      "{{ _efs.tags |
          d({}) |
          combine({'Name': _efs.name}) }}"
    targets: "{{ _efs_targets }}"
    throughput_mode: "{{ _efs.throughput_mode | d(omit) }}"
    transition_to_ia: "{{ _efs.transition_to_ia | d(omit) }}"
    validate_certs: true
    wait: "{{ _efs.wait | d(false) }}"
    wait_timeout: "{{ _efs.wait_timeout | d(0) }}"
  loop: "{{ efs_list }}"
  loop_control:
    label: "{{ _efs.name | d(none) }}"
    loop_var: _efs
  vars:
    _efs_targets:
      "{{ _efs.targets |
          map('combine', [{'security_groups':
                           [_efs_security_group_id[_efs.name]]}]) }}"
  when:
    - _efs.name is defined
    - _efs.targets is defined
    - _efs.targets | length > 0
...
